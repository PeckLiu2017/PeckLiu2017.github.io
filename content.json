[{"title":"2017.4.11 ORID","date":"2017-04-11T17:10:25.000Z","path":"2017/04/12/2017-4-11-ORID/","text":"Objective关于今天的课程, 你记得什么? 关于什么是学到东西的进一步认识 完成了什么? CSS有position和overflow属性。关于footer的布局 ##知识点一：将footer固定在浏览器页面的最底部。 页面的布局是这样的： 123456789&lt;body&gt; &lt;div class=&quot;container-fluid&quot;&gt; &lt;%= render &quot;common/navbar&quot; %&gt; &lt;%= render &quot;common/flashes&quot; %&gt; &lt;%= yield %&gt; &lt;/div&gt; &lt;div class=&quot;main&quot;&gt;&lt;/div&gt; &lt;%= render &apos;common/footer&apos; %&gt; &lt;/body&gt; 如果footer上面内容不够一页，footer就直接显示在浏览器底部。不是像这样： 而是像这样：解决思路是把body设为高度100%，然后把footer固定在它底部就可以了。body { height: 100%; margin: 0; padding: 0;}同时，.main { padding-bottom: 100px; margin-bottom: 10%;}footer { height: 10%; margin-top: -100px;}（最好用百分比高度，因为浏览器窗口大小问题可能是CSS样式效果发生改变。）为什么要有这一步呢，因为： CSS盒子中margin的属性，main元素是空的，但它的margin部分却把footer的内容包含了。若main里面有内容，则会紧挨着footer的内容，想要留白将footer置于底部，要设置padding，这里的情况使用padding-bottom把内容分开，padding——bottom=footer的height。 ##知识点二：撑大父元素。HTML布局如上，但发现问题，body并没有100%的高度，子元素footer\b跑到父元素body外面去了：原因是body中的子元素没有把body父元素“自动撑大”。解决方法是在body父元素中增加overflow属性，overflow规定溢出：123456body &#123; height: 100%; margin: 0; padding: 0; overflow: scroll;&#125; 然后父元素body被撑大到包含footer了。 ##知识点三：position属性。如果数据较多，显示内容超过一页，又将footer的position设为absolute，到了一页的末尾，有可能发生footer盖住上面内容的情况： Reflective 暂无。 Interpretive我们今天学到了什么?今天一个重要的领悟是什么? 实践是最好的学习，至于自己实际做出来，才知道会遇到哪些坑，以后决不能有一点侥幸心理，遇到代码，全部必须自己敲出来。 Decisional我们会如何用一句话形容今天的工作 时间投入不够 有哪些工作需要明天继续努力? 早起，上下午至少各3小时用于学代码。","tags":[{"name":"CSS","slug":"CSS","permalink":"https://peckliu2017.github.io/tags/CSS/"}]},{"title":"2017.4.8 ORID——Job-Listing小型工作招聘网站的思路总结","date":"2017-04-07T17:15:35.000Z","path":"2017/04/08/2017-4-8-ORID/","text":"Objective：一个问题引发的思考——要拥有思考的能力：自己做job-listing的功能开发时感到苦难重重，但看到job-listing的答案代码时，感到”原来这么简单！我怎么没想到呢？对啊，为什么很简单功能变化一下，搭配一下我却想不到呢“？看起来很简单，做起来却这么难，这其中的差别在于什么呢？差别应该在于教材上所说的”迁移能力“，或者说笑来老师所说的”把问题分解再组合起来的能力——归纳分析总结能力了”。不运用归纳分析能力的思考过程是这样的： 目标=&gt;&gt;对问题理解一知半解,没搞明白就做=&gt;&gt;想到了一点头绪，做了一部分工作=&gt;&gt;想做这个又想要那个或者想不下去了==&gt;工作量太大超出能力范围and接下来有点难了==&gt;只能或者只会做这么多了（其实是只能想这么多了）=&gt;&gt;任务失败 运用归纳分析能力的思考过程则是这样的： 目标=&gt;&gt;清晰地描述问题，把问题归纳成类=&gt;&gt;根据类别将大问题拆解成可以实作的小问题=&gt;&gt;做出最小规模的解决问题的方案（遇到的一般是时间精力等工作量的问题而不是不知道该怎么做的问题）=&gt;&gt;更新迭代进步=&gt;&gt;逐渐完成一开始被拆解的任务=&gt;&gt;任务成功 两个概念：1.正确的开发步骤： 开发的步骤：目标——做job-listing的网站=&gt;&gt;”用户故事“理清需求（描述和拆解问题）=&gt;&gt;做出最小可行产品,这里是crud操作=&gt;&gt;产品不断更新迭代（加上管理员与一般使用者的身份判断和前台后台的不同界面）=&gt;&gt;fontawesome美化界面，为调整工作的隐藏和公开状态而增加一个按钮以优化用户体验等=&gt;&gt;完成目标 为什么用”用户故事的方法？“ 把做产品归纳为服务不同的人。用”身为「某角色」，会做「某事」，以完成「某商业价值」“的标准衡量功能的价值，瞬间就会变得非常聚焦，所有功能都是「各角色所需要的关键功能」，把人的需求满足，我们的任务就完成了。在这里就是我要服务的就是管理员和使用者。 通过“Must have、should have、could have、nice to have”归纳出问题的重要性。做出基本的”CRUD“进行的功能，这非常重要，在这个基础上能教我如何开始，帮我抑制完美主义的狂想，实现从0到1的开端，然后在此基础上实现从1到N的发展。 怎样用？ 把想到的需求写下来 整理精简需求,归纳出角色,用V1级别的绿色圈圈圈起来。根据角色开始开发功能,这里先开发管理员功能 2.一个通用的顺利完成开发的方法(两个顺序——MVC和CRUD,CRUD之前先加路由route)： 做事不重不漏,产品可以随时迭代，代码可扩展，后续想增加什么东西不会跟前面有大的冲突。写代码的顺按照MVC的顺序，先设计Model，然后增加Controller,和view。 Model是一个承载CRUD操作和逻辑判断的载体。先增加两个字段title，description用来CRUD操作，涉及到选择的，”是还是不是“——可以用boolean值来实现。比如是否是管理员，工作是否隐藏用boolean值实现逻辑判断。 Controller的生成要放在V前面，因为有时在terminal中无法先生成view页面。 View安装bootstrap的gem，然后再文件中配置一下，一般去app/assets/stylesheets/application.scss和app/assets/javascripts/application.js这两个文件中配置。 按照CRUD的顺序，依次写各种功能的MVC代码。 迭代一次——分出前台后台，增加管理员面板以及判断,rails g controller admin::jobs。 迭代两次——往model中加入薪资上下线字段。 123validates :wage_upper_bound, presence: truevalidates :wage_lower_bound, presence: truevalidates :wage_lower_bound, numericality: &#123; greater_than: 0&#125; 迭代三次——增加隐藏/公开工作功能。 12345 class AddIsHiddenToJob &lt; ActiveRecord::Migration[5.0] def change add_column :jobs, :is_hidden, :boolean, default: true endend 迭代四次——增加fontawesome,sidebar,增加隐藏/公开工作功能按钮进行页面美化和功能的增加优化。 fontawesome 1234567def render_job_status(job) if job.is_hidden content_tag(:span, &quot;&quot;, :class =&gt; &quot;fa fa-lock&quot;) else content_tag(:span, &quot;&quot;, :class =&gt; &quot;fa fa-globe&quot;) end end sidebar 123&lt;ul class=&quot;nav nav-pills nav-stacked&quot; style=&quot;max-width: 300px; padding-top:20px;&quot;&gt; &lt;li class=&quot;active&quot;&gt;&lt;%= link_to(&quot;Jobs&quot;, admin_jobs_path ) %&gt; &lt;/li&gt;&lt;/ul&gt; 增加隐藏/公开工作功能 123456789101112def publish @job = Job.find(params[:id]) @job.is_hidden = false @job.save redirect_to :back enddef hide @job = Job.find(params[:id]) @job.is_hidden = true @job.save redirect_to :back end 然后任务完成。 Reflective 今天的情绪平稳 Interpretive我们今天学到了什么? 上文所述两个概念。 今天一个重要的领悟是什么? 格式化写作可以大大增加写作效率，减少写作的时间。这篇文章从早上10点到现在16：13，修修改改花了太多时间了。虽然整理自己思绪是很重要的一件事，但这样耗不起。 Decisional 今天的工作合格，计划没有全部完成，这是因为计划订的不够实际还是自己做事拖拉？这需要调整。不吃饭工作又困又饿实在不好受。 今后要积累更多的写作模板以高效写作。","tags":[{"name":"方法总结","slug":"方法总结","permalink":"https://peckliu2017.github.io/tags/方法总结/"}]},{"title":"2017.4.7 ORID","date":"2017-04-07T14:08:02.000Z","path":"2017/04/07/2017-4-7-ORID/","text":"Objective关于今天的知识, 你记得什么? hexo的个人博客搭建，见证了一些大神的作品，心中极为震撼。熟悉了一些技术细节，将写在前端学习里。 完成了什么? hexo的搜索功能，disqus留言板功能，cotegory,tags功能，markdown发布第一篇个人博客。 Reflective你要如何形容今天的情绪 渐渐进入一种痴迷状态，痴迷，就是要被酷的东西吸引。被打断很暴躁，这需要注意。 今天的高峰是什么? 当我看到大神亮瞎眼的github账号，所开发的精美的博客模板，淡定清秀的笑容，充满美感的摄影，清新的文笔，还有对音乐游戏的高度审美，羞涩谦虚的态度，不禁痴迷，震撼。 今天的低点是什么? disqus装不上时深深焦虑。 Interpretive我们今天学到了什么? 心态和解决问题速度的认识。 自己的心态仍需要锻炼，遇到需要了解的英文文档，要耐心把它看完。 需要我搜索的问题，一定要注意用英文关键字Google。自己琢磨接近3小时没有成果，Google瞬间找到了方向。 今天一个重要的领悟是什么? 编程能力说到底是理解认知能力的进步，无论是编码能力还是学习搜索能力。 以后一定要学好英文，这样可以直接看原文技术文档。中文二手翻译资料好多不详细，而且因为软件版本变化，不看最新官方说明文档使用相关软件和服务简直是盲人摸象。零零碎碎地看中英文教程相当于随机抽牌比牌面，有英文技术文档阅读能力则相当于拥有透视眼直接看穿所有牌面。 Decisional我们会如何用一句话形容今天的工作 直到被node.js搞得痛不欲生，才知道Github Pages免费博客可以用ruby做，直到自己“终日而思不如须臾之所学”才知道Google，以后思考问题一定要想到离自己最近的工具。一定要学好ruby，然后用ruby做一个致敬前辈的一模一样的网站。 有哪些工作需要明天继续努力? 继续熟悉job-listing的开发思路，把代码做一遍。然后看全栈营其它学长学姐的作品，学习3个相关功能。然后带着问题参加晚上的meetup。","tags":[{"name":"ORID","slug":"ORID","permalink":"https://peckliu2017.github.io/tags/ORID/"}]},{"title":"2017.4.6 ORID","date":"2017-04-07T05:44:01.000Z","path":"2017/04/07/2017-4-6-ORID/","text":"Objective关于今天的课程, 你记得什么? job-listing的开发。 完成了什么? 自己完成了一部分功能，体会到了迁移思考的过程，这跟直接抄答案是完全不一样的。 Reflective你要如何形容今天的情绪 总体较好。能够控制自己的情绪。 今天的高峰是什么? 线上meetup的分享。 今天的低点是什么? 怕写代码失败。看到少数几个人已经提交了作业，也想要提前交作业，这种心态不是很好。 Interpretive我们今天学到了什么? 进一步记录自己的时间花费 今天一个重要的领悟是什么? 有问题可以自己琢磨，但也可以先Google。要注意哪种方法更高效。 Decisional我们会如何用一句话形容今天的工作 还可以吧，保证了时间上的投入。 有哪些工作需要明天继续努力? 继续熟悉job-listing的开发思路。 开始弄自己的个人网站，先把首页弄出来。要怀着开心兴奋探索的心情去做这件事。","tags":[{"name":"ORID","slug":"ORID","permalink":"https://peckliu2017.github.io/tags/ORID/"}]},{"title":"Hello World","date":"2017-04-01T19:37:02.000Z","path":"2017/04/02/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]